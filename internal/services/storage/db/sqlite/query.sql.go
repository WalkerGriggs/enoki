// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package sqlite

import (
	"context"
)

const createAsset = `-- name: CreateAsset :one
INSERT INTO assets (
       name,
       path
) VALUES (
  ?, ?
)
RETURNING id, path, name
`

type CreateAssetParams struct {
	Name string `json:"name"`
	Path string `json:"path"`
}

func (q *Queries) CreateAsset(ctx context.Context, arg CreateAssetParams) (Asset, error) {
	row := q.db.QueryRowContext(ctx, createAsset, arg.Name, arg.Path)
	var i Asset
	err := row.Scan(&i.ID, &i.Path, &i.Name)
	return i, err
}

const getAsset = `-- name: GetAsset :one
SELECT id, path, name
FROM assets
WHERE name = ?
`

func (q *Queries) GetAsset(ctx context.Context, name string) (Asset, error) {
	row := q.db.QueryRowContext(ctx, getAsset, name)
	var i Asset
	err := row.Scan(&i.ID, &i.Path, &i.Name)
	return i, err
}

const getAssets = `-- name: GetAssets :many
SELECT id, path, name
FROM assets
`

func (q *Queries) GetAssets(ctx context.Context) ([]Asset, error) {
	rows, err := q.db.QueryContext(ctx, getAssets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Asset
	for rows.Next() {
		var i Asset
		if err := rows.Scan(&i.ID, &i.Path, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
